<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>discord.py Bot Tutorial</title><link>https://vcokltfre.dev/</link><description>Recent content on discord.py Bot Tutorial</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://vcokltfre.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>Allowed Mentions</title><link>https://vcokltfre.dev/tips/mentions/</link><pubDate>Thu, 18 Feb 2021 20:05:28 +0000</pubDate><guid>https://vcokltfre.dev/tips/mentions/</guid><description>In this bonus section I'll cover the Discord feature of allowed mentions, unfortunately this isnt finished yet though :(</description></item><item><title>Tokens</title><link>https://vcokltfre.dev/tips/tokens/</link><pubDate>Thu, 18 Feb 2021 20:05:28 +0000</pubDate><guid>https://vcokltfre.dev/tips/tokens/</guid><description>In this bonus section I'll explain the 3 most common methods of storing the token for your bot. Note that for these examples you should assume that there is a bot defined somewhere else in the code, and the line bot.run(token) is at the bottom. I won't show the bot code in each example to show just the necessary information, and make this applicable outside of Discord bots too.
You should also be sure when using git to gitignore all of the files you store sensitive information in from any of these examples, to avoide committing them to version control.</description></item><item><title>01 - Creating a Bot User</title><link>https://vcokltfre.dev/tutorial/01-setup/</link><pubDate>Wed, 17 Feb 2021 12:49:20 +0000</pubDate><guid>https://vcokltfre.dev/tutorial/01-setup/</guid><description>This section of the tutorial will show you how to create a new bot and add it to your server.
To create Discord applications and bots you will need a verified email address. The first thing you need to do to create a bot is head over to the Discord Developer Portal where you'll be asked to log in to your Discord account. Upon logging in you'll see a screen like this:</description></item><item><title>02 - An Overview of Discord</title><link>https://vcokltfre.dev/tutorial/02-overview/</link><pubDate>Wed, 17 Feb 2021 12:49:20 +0000</pubDate><guid>https://vcokltfre.dev/tutorial/02-overview/</guid><description>In this part of the tutorial, I’ll try to give a rough explanation of how Discord functions. If you already have a decent understanding of websockets, the API, and Discord terminology, you can likely move on to 03 - Hello, World!
1: The Discord Gateway The Discord gateway is how your bot receives events from Discord, so understanding it can be useful to understand what a bot's capabilities are and what Discord gives you to work with.</description></item><item><title>03 - Hello, world!</title><link>https://vcokltfre.dev/tutorial/03-hello/</link><pubDate>Wed, 17 Feb 2021 12:49:20 +0000</pubDate><guid>https://vcokltfre.dev/tutorial/03-hello/</guid><description>In this part, I’ll show you the basics of how to create a super simple bot and get it connected to Discord. From now on it is assumed that you have the discord.py library installed, along with a version of Python which is 3.6 or above, as versions before this don’t have all the features used in this tutorial.
The first step to creating a bot is to import the discord.</description></item><item><title>04 - A Ping Command</title><link>https://vcokltfre.dev/tutorial/04-pong/</link><pubDate>Wed, 17 Feb 2021 12:49:20 +0000</pubDate><guid>https://vcokltfre.dev/tutorial/04-pong/</guid><description>So far we've made a pretty simple bot - it only responds to !hello with a static response. Not particularly interesting, is it? Let's fix that! In this part we'll be creating a ping command that shows the bot's gateway websocket latency when you call it.
As with the previous part we'll want to import and set up the bot like below:
1from discord.ext import commands 2 3bot = commands.Bot(command_prefix=&amp;#34;!&amp;#34;) 4 5@bot.</description></item><item><title>05 - Cogs</title><link>https://vcokltfre.dev/tutorial/05-cogs/</link><pubDate>Wed, 17 Feb 2021 12:49:20 +0000</pubDate><guid>https://vcokltfre.dev/tutorial/05-cogs/</guid><description>Cogs are a very important part of discord.py which allow you to organise your commands into groups - not to be confused with actual command groups, which will be explained later in the tutorial.
Cogs represent a fairly drastic change in the way you write commands and bots, so it's good that we're getting into them here before you're too used to sticking the commands in the main file of the bot.</description></item><item><title>06 - Online!</title><link>https://vcokltfre.dev/tutorial/06-online/</link><pubDate>Wed, 17 Feb 2021 12:49:20 +0000</pubDate><guid>https://vcokltfre.dev/tutorial/06-online/</guid><description>You've learned how to make commands, and how to make cogs, so now that you know how to use both, let's make something a little more complicated and useful - a command that sets your bot's status.
For this part we'll start off with the same files we ended with in the last part, which means we'll be adding our new command to somecommands.py, and in fact we won't even need to change the main bot file, that can stay just as it is.</description></item><item><title>07 - Welcome</title><link>https://vcokltfre.dev/tutorial/07-welcome/</link><pubDate>Wed, 17 Feb 2021 12:49:20 +0000</pubDate><guid>https://vcokltfre.dev/tutorial/07-welcome/</guid><description>Ok, so far we've learned how to make a bot, add commands, use cogs, and change the status. Let's combine some of this and a bit of new stuff to make something that welcomes users with a custom message when they join a server.
To start out, we'll once again use the same code from the previous part and add to that. First, we have a modification we need to make to the bot.</description></item><item><title>08 - A Better Ping Command</title><link>https://vcokltfre.dev/tutorial/08-ping2/</link><pubDate>Wed, 17 Feb 2021 12:49:20 +0000</pubDate><guid>https://vcokltfre.dev/tutorial/08-ping2/</guid><description>In 04 - A Ping Command we made a simple ping command that shows the bot's websocket latency to the gateway, which in itself can be useful for seeing the latency, but it doesn't show API ping, which is another major factor in the bot's latency.
To add API latency we're going to send a message, and time how long it takes to send, then we'll edit that message to show the ping.</description></item><item><title>09 - What Did That Message Say?</title><link>https://vcokltfre.dev/tutorial/09-snipe/</link><pubDate>Wed, 17 Feb 2021 12:49:20 +0000</pubDate><guid>https://vcokltfre.dev/tutorial/09-snipe/</guid><description>In this part I'll introduce a couple of new things we haven't met yet:
The message delete event and as such also what the message cache is Embeds The aim of this part is to teach you about how the message delete event works, and creating an embed with the content of the deleted message to create a !snipe command.
Firstly, we'll take the code from the previous parts.</description></item><item><title>10 - All About Embeds</title><link>https://vcokltfre.dev/tutorial/10-embeds/</link><pubDate>Wed, 17 Feb 2021 12:49:20 +0000</pubDate><guid>https://vcokltfre.dev/tutorial/10-embeds/</guid><description>Nice! You're already 10 parts in, good job! In this part I'm going to show you all about embeds. I won't show the embeds in tandem with the actual bot, since we're focusing on creating them, but to send them you can use the method presented in part 9.
For this part I'll assume that you have imported discord at the top of your file.
Creating an Embed Createing an embed is a simple as instantiating an Embed object like this:</description></item><item><title>11 - Cooldowns</title><link>https://vcokltfre.dev/tutorial/11-cooldowns/</link><pubDate>Wed, 17 Feb 2021 12:49:20 +0000</pubDate><guid>https://vcokltfre.dev/tutorial/11-cooldowns/</guid><description>You may often find a need when making bots to give commands their own cooldowns, to ensure that they're not called too often. There are a variety of reasons for this, such as mitigating spam, or fairly commonly, making sure people don't send too many requests if the command is an API intensive one.
Fortunately for us, discord.py provides built-in cooldown decorators that we can use on our existing commands that do just this.</description></item></channel></rss>