<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>discord.py Bot Tutorial</title><link>https://vcokltfre.dev/tutorial/</link><description>Recent content on discord.py Bot Tutorial</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://vcokltfre.dev/tutorial/index.xml" rel="self" type="application/rss+xml"/><item><title>00 - Credits and Special Thanks</title><link>https://vcokltfre.dev/tutorial/00-credits/</link><pubDate>Wed, 17 Feb 2021 12:49:20 +0000</pubDate><guid>https://vcokltfre.dev/tutorial/00-credits/</guid><description>This is a page to show credits and special thanks for help people have provided with this tutorial, or things within it.
Firstly, thanks to Danny/Rapptz for making discord.py, without which this tutorial would obviously not exist, nor would countless amazing bots using the discord.py library. His Github profile can be found here.
Next, anand/ares initially helped me a great deal with getting the site up on Github pages, and making the first pages version.</description></item><item><title>01 - Creating a Bot User</title><link>https://vcokltfre.dev/tutorial/01-setup/</link><pubDate>Wed, 17 Feb 2021 12:49:20 +0000</pubDate><guid>https://vcokltfre.dev/tutorial/01-setup/</guid><description>To create Discord applications and bots you will need a verified email address. The first thing you need to do to create a bot is head over to the Discord Developer Portal where you'll be asked to log in to your Discord account. Upon logging in you'll see a screen like this:
Now that you're logged into the developer portal you need to create a new application by clicking the shiny blue New Application button in the top right hand corner.</description></item><item><title>02 - An Overview of Discord</title><link>https://vcokltfre.dev/tutorial/02-overview/</link><pubDate>Wed, 17 Feb 2021 12:49:20 +0000</pubDate><guid>https://vcokltfre.dev/tutorial/02-overview/</guid><description>If you already have a decent understanding of websockets, the API, and Discord terminology, you can likely move on to 03 - Hello, World!
1: The Discord Gateway The Discord gateway is how your bot receives events from Discord, so understanding it can be useful to understand what a bot's capabilities are and what Discord gives you to work with.
So, what actually is this Discord Gateway you keep mentioning? The gateway is actually a fairly simple websocket connection to Discord - basically a web request that connects a socket, which then stays open so that Discord can send events to you, rather than you fetching events from Discord.</description></item><item><title>03 - Hello, world!</title><link>https://vcokltfre.dev/tutorial/03-hello/</link><pubDate>Wed, 17 Feb 2021 12:49:20 +0000</pubDate><guid>https://vcokltfre.dev/tutorial/03-hello/</guid><description>From now on it is assumed that you have the discord.py library installed, along with a version of Python which is 3.6 or above, as versions before this donâ€™t have all the features used in this tutorial.
The first step to creating a bot is to import the discord.ext.commands module of discord.py so that we can create the bot:
1from discord.ext import commands # This is the part of discord.py that helps us build bots Epic!</description></item><item><title>04 - A Ping Command</title><link>https://vcokltfre.dev/tutorial/04-pong/</link><pubDate>Wed, 17 Feb 2021 12:49:20 +0000</pubDate><guid>https://vcokltfre.dev/tutorial/04-pong/</guid><description>As with the previous part we'll want to import and set up the bot like below:
1from discord.ext import commands 2 3bot = commands.Bot(command_prefix=&amp;#34;!&amp;#34;) 4 5@bot.command(name=&amp;#34;hello&amp;#34;) 6async def hello_world(ctx: commands.Context): 7 await ctx.send(&amp;#34;Hello, world!&amp;#34;) 8 9bot.run(&amp;#34;your_token_here&amp;#34;) This is a insecure way of setting the token used for brevity, please read this bonus part about storing tokens. But now we want to add another command between the hello command and where we run the bot.</description></item><item><title>05 - Cogs</title><link>https://vcokltfre.dev/tutorial/05-cogs/</link><pubDate>Wed, 17 Feb 2021 12:49:20 +0000</pubDate><guid>https://vcokltfre.dev/tutorial/05-cogs/</guid><description>Cogs represent a fairly drastic change in the way you write commands and bots, so it's good that we're getting into them here before you're too used to sticking the commands in the main file of the bot.
Cogs require a basic understand of OOP/classes in Python. If you're not familiar with this, check out the first video in Corey Schafer's OOP Tutorial. To start out with cogs we're going to abandon the code from the previous sections largely in favour of new commands tailored to cogs.</description></item><item><title>06 - Online!</title><link>https://vcokltfre.dev/tutorial/06-online/</link><pubDate>Wed, 17 Feb 2021 12:49:20 +0000</pubDate><guid>https://vcokltfre.dev/tutorial/06-online/</guid><description>For this part we'll start off with the same files we ended with in the last part, which means we'll be adding our new command to somecommands.py, and in fact we won't even need to change the main bot file, that can stay just as it is.
To recap, here's the somecommands.py file from the last part:
1from discord.ext import commands # Again, we need this imported 2 3 4class SomeCommands(commands.</description></item><item><title>07 - Welcome</title><link>https://vcokltfre.dev/tutorial/07-welcome/</link><pubDate>Wed, 17 Feb 2021 12:49:20 +0000</pubDate><guid>https://vcokltfre.dev/tutorial/07-welcome/</guid><description>To start out, we'll once again use the same code from the previous part and add to that. First, we have a modification we need to make to the bot.py file. Up until this point we've been using the default gateway intents that discord.py sends to the gateway - which is all except the privileged intents (server members and presences).
Before we can proceed to modify the code, we need to enable these privileged intents on the Discord developer portal.</description></item><item><title>08 - A Better Ping Command</title><link>https://vcokltfre.dev/tutorial/08-ping2/</link><pubDate>Wed, 17 Feb 2021 12:49:20 +0000</pubDate><guid>https://vcokltfre.dev/tutorial/08-ping2/</guid><description>To add API latency we're going to send a message, and time how long it takes to send, then we'll edit that message to show the ping. This will be quite a short part, as it is just a modification to the existing ping command. To recap, here's the existing ping command:
1 @commands.command(name=&amp;#34;ping&amp;#34;) 2 async def ping(self, ctx: commands.Context): 3 &amp;#34;&amp;#34;&amp;#34;Get the bot&amp;#39;s current websocket latency.&amp;#34;&amp;#34;&amp;#34; 4 await ctx.send(f&amp;#34;Pong! {round(self.</description></item><item><title>09 - What Did That Message Say?</title><link>https://vcokltfre.dev/tutorial/09-snipe/</link><pubDate>Wed, 17 Feb 2021 12:49:20 +0000</pubDate><guid>https://vcokltfre.dev/tutorial/09-snipe/</guid><description>To do this I'll introduce a couple of new things we haven't met yet:
The message delete event and as such also what the message cache is Embeds The aim of this part is to teach you about how the on_message_delete event works, and creating an embed with the content of the deleted message to create a !snipe command.
Firstly, we'll take the code from the previous parts.</description></item><item><title>10 - All About Embeds</title><link>https://vcokltfre.dev/tutorial/10-embeds/</link><pubDate>Wed, 17 Feb 2021 12:49:20 +0000</pubDate><guid>https://vcokltfre.dev/tutorial/10-embeds/</guid><description>I won't show the embeds in tandem with the actual bot, since we're focusing on creating them, but to send them you can use the method presented in 09 - What Did That Message Say?.
For this part I'll assume that you have imported discord at the top of your file.
Creating an Embed Creating an embed is a simple as instantiating an Embed object like this:
1embed = discord.Embed() But that is not a very useful (although still valid) embed, since it's empty.</description></item><item><title>11 - Cooldowns</title><link>https://vcokltfre.dev/tutorial/11-cooldowns/</link><pubDate>Wed, 17 Feb 2021 12:49:20 +0000</pubDate><guid>https://vcokltfre.dev/tutorial/11-cooldowns/</guid><description>Fortunately for us, discord.py provides built-in cooldown decorators that we can use on our existing commands that do just this. This will be a fairly small part, since there is not that much to cover on the topic, however I hope it will be of great use for ratelimiting your commands.
To start with, let's recap one of the commands we have from earlier, the setstatus command:
1 @commands.command(name=&amp;#34;setstatus&amp;#34;) 2 async def setstatus(self, ctx: commands.</description></item><item><title>12 - Error Handling</title><link>https://vcokltfre.dev/tutorial/12-errors/</link><pubDate>Wed, 17 Feb 2021 12:49:20 +0000</pubDate><guid>https://vcokltfre.dev/tutorial/12-errors/</guid><description>There are several of ways you can go about error handling with discord.py:
Per-command error handlers Per-cog error handlers Global error handlers In this part I will only be covering per-command and global error handlers, but by all means feel free to go down the per-cog route by reading the docs and experimenting on your own. Again, as a general reminder I advise you don't just copy the code here, rather try to understand it yourself and make your own code.</description></item></channel></rss>